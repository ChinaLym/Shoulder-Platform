package ${package}.${pkgName}.controller;

import java.util.Map;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;
import org.shoulder.core.dto.response.PageResult;
import org.shoulder.core.dto.response.RestResult;

import ${package}.${pkgName}.entity.${className};
import ${package}.${pkgName}.service.${className}Service;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${lowClassName}Service;

    /**
     * 条件查询，分页
     * @param condition 查询条件
     * @return 分页结果
     */
    @RequestMapping("/list")
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:list')")
    public PageResult list(@RequestParam Map<String, Object> condition){
        PageResult pageResult = ${lowClassName}Service.findAll(condition);
        return pageResult;
    }


    /**
     * 保存单个
     * @param ${lowClassName} 新增数据
     * @return 保存成功
     */
    @RequestMapping("/save")
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:save')")
    public RestResult save(@RequestBody ${className} ${lowClassName}){
			${lowClassName}Service.save(${lowClassName});

        return RestResult.succeed();
    }

    /**
     * 单个修改
     * @param ${lowClassName} 修改属性
     * @return 修改成功
     */
    @RequestMapping("/update")
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:update')")
    public RestResult update(@RequestBody ${className} ${lowClassName}){
			${lowClassName}Service.update(${lowClassName});

        return RestResult.succeed();
    }

    /**
     * 根据 id 删除单个
     * @param ${pk.attributeName} id
     * @return 删除成功
     */
    @RequestMapping("/delete/{id}")
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:delete')")
    public RestResult delete(@PathVariable Long ${pk.attributeName}){
			${lowClassName}Service.delete(${pk.attributeName});
        return RestResult.succeed();
    }

}
