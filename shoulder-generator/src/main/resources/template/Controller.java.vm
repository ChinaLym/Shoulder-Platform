package ${package}.${pkgName}.controller;

import java.util.Map;

import io.swagger.annotations.Api;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${checkAuth})
import org.springframework.security.access.prepost.PreAuthorize;
#end
import org.shoulder.core.dto.response.PageResult;
import org.shoulder.core.dto.response.RestResult;

import ${package}.${pkgName}.convert.${className}Converter;
import ${package}.${pkgName}.dto.${className}DTO;
import ${package}.${pkgName}.model.${className};
import ${package}.${pkgName}.service.${className}Service;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${lowClassName}Service;

    /**
     * 条件查询，分页
     * @param condition 查询条件
     * @return 分页结果
     */
    @RequestMapping("list")
#if(${checkAuth})
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:list')")
#end
    public PageResult list(@RequestParam Map<String, Object> condition){
        return ${lowClassName}Service.findAll(condition);
    }


    /**
     * 保存单个，推荐使用幂等的 PUT 方法，体现接口幂等性。为了方便习惯，也开放了 POST
     *
     * @param ${lowClassName}DTO 新增数据
     * @return 保存成功
     */
    @RequestMapping(value = "save", method = {RequestMethod.PUT, RequestMethod.POST})
#if(${checkAuth})
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:save')")
#end
    public RestResult save(@RequestBody ${className}DTO ${lowClassName}DTO){
        ${className} ${lowClassName} = ${className}Converter.CONVERTER.fromDTO(${lowClassName}DTO);
		${lowClassName}Service.save(${lowClassName});

        return RestResult.success();
    }

    /**
     * 单个修改
     *
     * @param ${lowClassName}DTO 修改属性
     * @return 修改成功
     */
    @PostMapping("update")
#if(${checkAuth})
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:update')")
#end
    public RestResult update(@RequestBody ${className}DTO ${lowClassName}DTO){
        ${className} ${lowClassName} = ${className}Converter.CONVERTER.fromDTO(${lowClassName}DTO);
			${lowClassName}Service.update(${lowClassName});

        return RestResult.success();
    }

    /**
     * 根据 id 删除单个
     *
     * @param ${pk.attributeName} id
     * @return 删除成功
     */
    @RequestMapping(value = "delete/{id}", method = {RequestMethod.DELETE, RequestMethod.POST})
#if(${checkAuth})
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:delete')")
#end
    public RestResult delete(@PathVariable Long ${pk.attributeName}){
        ${lowClassName}Service.deleteById(${pk.attributeName});
        return RestResult.success();
    }

    /**
     * 根据 id 批量删除
     *
     * @param idList ids
     * @return 删除成功
     */
    @RequestMapping(value = "delete", method = {RequestMethod.DELETE, RequestMethod.POST})
#if(${checkAuth})
    @PreAuthorize("hasAnyAuthority('resource:sysroleuser:delete')")
#end
    public RestResult delete(List<Long> idList){
        if(CollectionUtils.isEmpty(idList)){
            return RestResult.success();
        }
        ${lowClassName}Service.deleteByIds(idList);
        return RestResult.success();
    }

}
